<?php
/**
 * CategoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * OpenAPI spec version: 6.4.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CategoryApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CategoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation readCategory
     *
     * Fetch a single category
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $category_id Identifier of the category to be fetched (required)
     * @param  \Swagger\Client\Model\CategoryCategoryIdBody $body body (optional)
     * @param  string $slots Resolves only the given slot identifiers. The identifiers have to be seperated by a &#x27;|&#x27; character (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Category
     */
    public function readCategory($content_type, $accept, $category_id, $body = null, $slots = null)
    {
        list($response) = $this->readCategoryWithHttpInfo($content_type, $accept, $category_id, $body, $slots);
        return $response;
    }

    /**
     * Operation readCategoryWithHttpInfo
     *
     * Fetch a single category
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $category_id Identifier of the category to be fetched (required)
     * @param  \Swagger\Client\Model\CategoryCategoryIdBody $body (optional)
     * @param  string $slots Resolves only the given slot identifiers. The identifiers have to be seperated by a &#x27;|&#x27; character (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Category, HTTP status code, HTTP response headers (array of strings)
     */
    public function readCategoryWithHttpInfo($content_type, $accept, $category_id, $body = null, $slots = null)
    {
        $returnType = '\Swagger\Client\Model\Category';
        $request = $this->readCategoryRequest($content_type, $accept, $category_id, $body, $slots);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Category',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readCategoryAsync
     *
     * Fetch a single category
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $category_id Identifier of the category to be fetched (required)
     * @param  \Swagger\Client\Model\CategoryCategoryIdBody $body (optional)
     * @param  string $slots Resolves only the given slot identifiers. The identifiers have to be seperated by a &#x27;|&#x27; character (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCategoryAsync($content_type, $accept, $category_id, $body = null, $slots = null)
    {
        return $this->readCategoryAsyncWithHttpInfo($content_type, $accept, $category_id, $body, $slots)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readCategoryAsyncWithHttpInfo
     *
     * Fetch a single category
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $category_id Identifier of the category to be fetched (required)
     * @param  \Swagger\Client\Model\CategoryCategoryIdBody $body (optional)
     * @param  string $slots Resolves only the given slot identifiers. The identifiers have to be seperated by a &#x27;|&#x27; character (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCategoryAsyncWithHttpInfo($content_type, $accept, $category_id, $body = null, $slots = null)
    {
        $returnType = '\Swagger\Client\Model\Category';
        $request = $this->readCategoryRequest($content_type, $accept, $category_id, $body, $slots);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readCategory'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $category_id Identifier of the category to be fetched (required)
     * @param  \Swagger\Client\Model\CategoryCategoryIdBody $body (optional)
     * @param  string $slots Resolves only the given slot identifiers. The identifiers have to be seperated by a &#x27;|&#x27; character (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readCategoryRequest($content_type, $accept, $category_id, $body = null, $slots = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling readCategory'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling readCategory'
            );
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling readCategory'
            );
        }

        $resourcePath = '/category/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($slots !== null) {
            $queryParams['slots'] = ObjectSerializer::toQueryValue($slots, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readCategoryList
     *
     * Fetch a list of categories
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \Swagger\Client\Model\CategoryBody $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function readCategoryList($content_type, $accept, $body = null)
    {
        list($response) = $this->readCategoryListWithHttpInfo($content_type, $accept, $body);
        return $response;
    }

    /**
     * Operation readCategoryListWithHttpInfo
     *
     * Fetch a list of categories
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \Swagger\Client\Model\CategoryBody $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function readCategoryListWithHttpInfo($content_type, $accept, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->readCategoryListRequest($content_type, $accept, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readCategoryListAsync
     *
     * Fetch a list of categories
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \Swagger\Client\Model\CategoryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCategoryListAsync($content_type, $accept, $body = null)
    {
        return $this->readCategoryListAsyncWithHttpInfo($content_type, $accept, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readCategoryListAsyncWithHttpInfo
     *
     * Fetch a list of categories
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \Swagger\Client\Model\CategoryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readCategoryListAsyncWithHttpInfo($content_type, $accept, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->readCategoryListRequest($content_type, $accept, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readCategoryList'
     *
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  \Swagger\Client\Model\CategoryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readCategoryListRequest($content_type, $accept, $body = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling readCategoryList'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling readCategoryList'
            );
        }

        $resourcePath = '/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readNavigation
     *
     * Fetch a navigation menu
     *
     * @param  \Swagger\Client\Model\RequestActiveIdRequestRootIdBody $body body (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $request_active_id Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). (required)
     * @param  string $request_root_id Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. (required)
     * @param  bool $sw_include_seo_urls Instructs Shopware to try and resolve SEO URLs for the given navigation item (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NavigationRouteResponse
     */
    public function readNavigation($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls = null)
    {
        list($response) = $this->readNavigationWithHttpInfo($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls);
        return $response;
    }

    /**
     * Operation readNavigationWithHttpInfo
     *
     * Fetch a navigation menu
     *
     * @param  \Swagger\Client\Model\RequestActiveIdRequestRootIdBody $body (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $request_active_id Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). (required)
     * @param  string $request_root_id Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. (required)
     * @param  bool $sw_include_seo_urls Instructs Shopware to try and resolve SEO URLs for the given navigation item (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NavigationRouteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readNavigationWithHttpInfo($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls = null)
    {
        $returnType = '\Swagger\Client\Model\NavigationRouteResponse';
        $request = $this->readNavigationRequest($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NavigationRouteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readNavigationAsync
     *
     * Fetch a navigation menu
     *
     * @param  \Swagger\Client\Model\RequestActiveIdRequestRootIdBody $body (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $request_active_id Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). (required)
     * @param  string $request_root_id Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. (required)
     * @param  bool $sw_include_seo_urls Instructs Shopware to try and resolve SEO URLs for the given navigation item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readNavigationAsync($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls = null)
    {
        return $this->readNavigationAsyncWithHttpInfo($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readNavigationAsyncWithHttpInfo
     *
     * Fetch a navigation menu
     *
     * @param  \Swagger\Client\Model\RequestActiveIdRequestRootIdBody $body (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $request_active_id Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). (required)
     * @param  string $request_root_id Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. (required)
     * @param  bool $sw_include_seo_urls Instructs Shopware to try and resolve SEO URLs for the given navigation item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readNavigationAsyncWithHttpInfo($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls = null)
    {
        $returnType = '\Swagger\Client\Model\NavigationRouteResponse';
        $request = $this->readNavigationRequest($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readNavigation'
     *
     * @param  \Swagger\Client\Model\RequestActiveIdRequestRootIdBody $body (required)
     * @param  string $content_type Content type of the request (required)
     * @param  string $accept Accepted response content types (required)
     * @param  string $request_active_id Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). (required)
     * @param  string $request_root_id Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. (required)
     * @param  bool $sw_include_seo_urls Instructs Shopware to try and resolve SEO URLs for the given navigation item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readNavigationRequest($body, $content_type, $accept, $request_active_id, $request_root_id, $sw_include_seo_urls = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling readNavigation'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling readNavigation'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling readNavigation'
            );
        }
        // verify the required parameter 'request_active_id' is set
        if ($request_active_id === null || (is_array($request_active_id) && count($request_active_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_active_id when calling readNavigation'
            );
        }
        // verify the required parameter 'request_root_id' is set
        if ($request_root_id === null || (is_array($request_root_id) && count($request_root_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_root_id when calling readNavigation'
            );
        }

        $resourcePath = '/navigation/{requestActiveId}/{requestRootId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($sw_include_seo_urls !== null) {
            $headerParams['sw-include-seo-urls'] = ObjectSerializer::toHeaderValue($sw_include_seo_urls);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($request_active_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requestActiveId' . '}',
                ObjectSerializer::toPathValue($request_active_id),
                $resourcePath
            );
        }
        // path params
        if ($request_root_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requestRootId' . '}',
                ObjectSerializer::toPathValue($request_root_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sw-access-key');
        if ($apiKey !== null) {
            $headers['sw-access-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
