<?php
/**
 * SalesChannelContextContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * OpenAPI spec version: 6.4.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesChannelContextContext Class Doc Comment
 *
 * @category Class
 * @description Core context with general configuration values and state
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesChannelContextContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesChannelContext_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version_id' => 'string',
'currency_id' => 'string',
'currency_factor' => 'int',
'currency_precision' => 'int',
'scope' => 'string',
'source' => 'string',
'tax_state' => 'string',
'use_cache' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version_id' => null,
'currency_id' => null,
'currency_factor' => null,
'currency_precision' => 'int32',
'scope' => null,
'source' => null,
'tax_state' => null,
'use_cache' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version_id' => 'versionId',
'currency_id' => 'currencyId',
'currency_factor' => 'currencyFactor',
'currency_precision' => 'currencyPrecision',
'scope' => 'scope',
'source' => 'source',
'tax_state' => 'taxState',
'use_cache' => 'useCache'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version_id' => 'setVersionId',
'currency_id' => 'setCurrencyId',
'currency_factor' => 'setCurrencyFactor',
'currency_precision' => 'setCurrencyPrecision',
'scope' => 'setScope',
'source' => 'setSource',
'tax_state' => 'setTaxState',
'use_cache' => 'setUseCache'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version_id' => 'getVersionId',
'currency_id' => 'getCurrencyId',
'currency_factor' => 'getCurrencyFactor',
'currency_precision' => 'getCurrencyPrecision',
'scope' => 'getScope',
'source' => 'getSource',
'tax_state' => 'getTaxState',
'use_cache' => 'getUseCache'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_factor'] = isset($data['currency_factor']) ? $data['currency_factor'] : null;
        $this->container['currency_precision'] = isset($data['currency_precision']) ? $data['currency_precision'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['tax_state'] = isset($data['tax_state']) ? $data['tax_state'] : null;
        $this->container['use_cache'] = isset($data['use_cache']) ? $data['use_cache'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version_id
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string $version_id version_id
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_factor
     *
     * @return int
     */
    public function getCurrencyFactor()
    {
        return $this->container['currency_factor'];
    }

    /**
     * Sets currency_factor
     *
     * @param int $currency_factor currency_factor
     *
     * @return $this
     */
    public function setCurrencyFactor($currency_factor)
    {
        $this->container['currency_factor'] = $currency_factor;

        return $this;
    }

    /**
     * Gets currency_precision
     *
     * @return int
     */
    public function getCurrencyPrecision()
    {
        return $this->container['currency_precision'];
    }

    /**
     * Sets currency_precision
     *
     * @param int $currency_precision currency_precision
     *
     * @return $this
     */
    public function setCurrencyPrecision($currency_precision)
    {
        $this->container['currency_precision'] = $currency_precision;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets tax_state
     *
     * @return string
     */
    public function getTaxState()
    {
        return $this->container['tax_state'];
    }

    /**
     * Sets tax_state
     *
     * @param string $tax_state tax_state
     *
     * @return $this
     */
    public function setTaxState($tax_state)
    {
        $this->container['tax_state'] = $tax_state;

        return $this;
    }

    /**
     * Gets use_cache
     *
     * @return bool
     */
    public function getUseCache()
    {
        return $this->container['use_cache'];
    }

    /**
     * Sets use_cache
     *
     * @param bool $use_cache use_cache
     *
     * @return $this
     */
    public function setUseCache($use_cache)
    {
        $this->container['use_cache'] = $use_cache;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
