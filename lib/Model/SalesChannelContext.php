<?php
/**
 * SalesChannelContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Store API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * OpenAPI spec version: 6.4.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesChannelContext Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesChannelContext extends ArrayStruct 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesChannelContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'token' => 'string',
'current_customer_group' => '\Swagger\Client\Model\SalesChannelContextCurrentCustomerGroup',
'fallback_customer_group' => '\Swagger\Client\Model\SalesChannelContextFallbackCustomerGroup',
'currency' => '\Swagger\Client\Model\SalesChannelContextCurrency',
'sales_channel' => '\Swagger\Client\Model\SalesChannelContextSalesChannel',
'tax_rules' => '\Swagger\Client\Model\SalesChannelContextTaxRules[]',
'customer' => '\Swagger\Client\Model\SalesChannelContextCustomer',
'payment_method' => '\Swagger\Client\Model\SalesChannelContextPaymentMethod',
'shipping_method' => '\Swagger\Client\Model\SalesChannelContextShippingMethod',
'context' => '\Swagger\Client\Model\SalesChannelContextContext'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'token' => null,
'current_customer_group' => null,
'fallback_customer_group' => null,
'currency' => null,
'sales_channel' => null,
'tax_rules' => null,
'customer' => null,
'payment_method' => null,
'shipping_method' => null,
'context' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
'current_customer_group' => 'currentCustomerGroup',
'fallback_customer_group' => 'fallbackCustomerGroup',
'currency' => 'currency',
'sales_channel' => 'salesChannel',
'tax_rules' => 'taxRules',
'customer' => 'customer',
'payment_method' => 'paymentMethod',
'shipping_method' => 'shippingMethod',
'context' => 'context'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
'current_customer_group' => 'setCurrentCustomerGroup',
'fallback_customer_group' => 'setFallbackCustomerGroup',
'currency' => 'setCurrency',
'sales_channel' => 'setSalesChannel',
'tax_rules' => 'setTaxRules',
'customer' => 'setCustomer',
'payment_method' => 'setPaymentMethod',
'shipping_method' => 'setShippingMethod',
'context' => 'setContext'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
'current_customer_group' => 'getCurrentCustomerGroup',
'fallback_customer_group' => 'getFallbackCustomerGroup',
'currency' => 'getCurrency',
'sales_channel' => 'getSalesChannel',
'tax_rules' => 'getTaxRules',
'customer' => 'getCustomer',
'payment_method' => 'getPaymentMethod',
'shipping_method' => 'getShippingMethod',
'context' => 'getContext'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['current_customer_group'] = isset($data['current_customer_group']) ? $data['current_customer_group'] : null;
        $this->container['fallback_customer_group'] = isset($data['fallback_customer_group']) ? $data['fallback_customer_group'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['tax_rules'] = isset($data['tax_rules']) ? $data['tax_rules'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Context the user session
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets current_customer_group
     *
     * @return \Swagger\Client\Model\SalesChannelContextCurrentCustomerGroup
     */
    public function getCurrentCustomerGroup()
    {
        return $this->container['current_customer_group'];
    }

    /**
     * Sets current_customer_group
     *
     * @param \Swagger\Client\Model\SalesChannelContextCurrentCustomerGroup $current_customer_group current_customer_group
     *
     * @return $this
     */
    public function setCurrentCustomerGroup($current_customer_group)
    {
        $this->container['current_customer_group'] = $current_customer_group;

        return $this;
    }

    /**
     * Gets fallback_customer_group
     *
     * @return \Swagger\Client\Model\SalesChannelContextFallbackCustomerGroup
     */
    public function getFallbackCustomerGroup()
    {
        return $this->container['fallback_customer_group'];
    }

    /**
     * Sets fallback_customer_group
     *
     * @param \Swagger\Client\Model\SalesChannelContextFallbackCustomerGroup $fallback_customer_group fallback_customer_group
     *
     * @return $this
     */
    public function setFallbackCustomerGroup($fallback_customer_group)
    {
        $this->container['fallback_customer_group'] = $fallback_customer_group;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\SalesChannelContextCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\SalesChannelContextCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \Swagger\Client\Model\SalesChannelContextSalesChannel
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \Swagger\Client\Model\SalesChannelContextSalesChannel $sales_channel sales_channel
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets tax_rules
     *
     * @return \Swagger\Client\Model\SalesChannelContextTaxRules[]
     */
    public function getTaxRules()
    {
        return $this->container['tax_rules'];
    }

    /**
     * Sets tax_rules
     *
     * @param \Swagger\Client\Model\SalesChannelContextTaxRules[] $tax_rules Currently active tax rules and/or rates
     *
     * @return $this
     */
    public function setTaxRules($tax_rules)
    {
        $this->container['tax_rules'] = $tax_rules;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\SalesChannelContextCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\SalesChannelContextCustomer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Swagger\Client\Model\SalesChannelContextPaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Swagger\Client\Model\SalesChannelContextPaymentMethod $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return \Swagger\Client\Model\SalesChannelContextShippingMethod
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param \Swagger\Client\Model\SalesChannelContextShippingMethod $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \Swagger\Client\Model\SalesChannelContextContext
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \Swagger\Client\Model\SalesChannelContextContext $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
